;;?
 ;  @INFO
 ;  Text literals!
?;;

;; @NOTE You can define char literals using single quotes!
'a';

;; @NOTE You can also use escape characters!
'\n';

;; @WARNING If you attempt to use invalid characters, or add more than one character, the build will fail!
;; {'asasa'} and {'\x'} are invalid!

;; @WARNING If you open a character literal without closing it, all that comes after the opening quote until then
;; end of the line will be considered part of the character literal, and it will also throw an error!
;; {'aaasa} <- this is all part of the character literal!}

;; @NOTE You can define string literals using double quotes!
"This is my string!";

;; @NOTE You can also use escape characters!
"This\nis\nmy\nstring!";

;; @NOTE You can use template strings to reference variables and constants!
;; The referenced value is casted into a String when passed to the template string!
;; @WARNING This is only limited to primitive types! Any other type will result in an error!
`The value of 'myVar' is \{myVar}!`; ;; this will not work, because you escaped the opening curely bracket!
`The value of '#myConst' is {#myConst}!`;
