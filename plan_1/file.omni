/**
 *
 * This is a language syntax draft for Omniarium
 * (.omni - Omniarium)
 *
**/

// @note : Omniarium is not an independent programming language! It is strictly used to 
// generate high-level code specific to the user's project!

// @note : You may define your own project libraries and import them using the "import" statement!
// To add a path for your library, you may use your project file (.omni.manifest) to include them.

// @note : The "standard" library's only use is to help users generate code for common development
// targets - like plain web, or plain C++.
// You may even make use of the language just to write more memory-conscious code for a specific
// target!

// Definitions:
// root-exclusive: can be used only at the top-level of the code tree!
// code-statement: any code that ends with a semicolon, a code block (scope), or a
// context separation (e.g. && or || conditions)

// Import platform filters
import @?javascript as @web, @?java as @android from standard.targets;
// Note that the "as" keyword will change the name of the imported component in the generated code!

// All custom libraries can be accessed by starting the package path with the word "library" 
import x, -y, z from custom-lib;

// And custom libraries can have inner paths of their own
import Type-X, Type-Y, Type-Z from custom-lib.types;

// You may import all code from a library like this!
import * from custom-lib.types;

// You may also use a prefix keyword to import all code from a library!
import * as my-handle from custom-lib.types;
my-handle.Type-X; // You'd have to use the custom handle you used in the declaration!

// @note : "import" statements are root-exclusive!

// All data that is meant to be imported using the "import" statement needs to be exported using
// the "export" statement within the library file!
export integer a = 0;

// @note : "export" statements are root-exclusive!

// @note : Variables defined in the root-level of the code tree are global variables!
// Global variables are only accessible to the code within the same file, unless they are exported!

// @note : Variables are only accessible to scopes/levels within the same, or a deeper, scope/level

// @note : Variables are automatically freed from memory at the end of the scope/level they were
// defined in!

/**
 *
 * @info
 *
 * Filters are used to restrict a value's existence within the code tree!
 * Should a filter return a [boolean] false state, whatever value or code block that comes
 * after said filter will be replaced with an [empty] value. ([empty] acts the same as 'null')'
 *
**/
// @note : Filter blocks only allow use of static code values in conditions! (You may make use of
// variables, but they must be statically defined!)
filter @my-filter {
    // This filter includes this code if the target is either javascript or Java!
    return ((@web true) != empty || (@android true) != empty);
}

// For example, the standard library may offer a global catch-all filter for multiple versions of one
// target language!
filter @javascript {
    return ((@?es2017 true) != empty || (@?es2020 true) != empty);
}

// @note : The symbol "#" is used to access transpiler transpile-time values!
// Defined transpile-time values are always strings!

// This is another way to implement this filter
filter @my-filter {
    // (not recommended in normal circumstances, only used by the standard library)
    return (#target.is-web == "true" || #target.is-java == "true");
}

// @note : The symbol "$" is used to access user-defined variables (stored in .omni.ini)

// You may use a filter in your project like this!
filter @my-filter {
    // You'd naturally have these values saved in your project's ".omni.ini" file!
    return ($using-subdomain-a == "true" || $using-subdomain-b == "true");
}

// Note that the name "$include" is reserved by the compiler!
$include; // This will result in build failure!


// @note : "filter" statements are root-exclusive!

// @note : "filter" statements are only processed at transpile-time! Any variables
// used inside the filter's initial definition code block need to be defined at transpile-time!

@my-filter
"hiiii";

// @note : You can use filters only at the start of a code-statement

// @note : Your library should be based on one of the available language targets! (@?target)
// Should your specific library require the implementation of a new language target (say a new
// programming language), do not mix it with your niche project-specific needs! Make a independent
// custom language target from scratch, then base your library on that language target!

// If you are making a custom target, you may check its name/code!
filter @custom-target {
    // You may pass the custom target name to the transpiler when you build your project!
    // (this code would be used by language-implementation libraries!)
    return (#target.name == "transpiler-target-name");
}

/**
 *
 * @info
 *
 * The standard library shall include standard types, which can
 * handle all the supported target sources.
 *
 * Notice that an empty Omni code file does not include any types by default!
 * 
 * List of planned types:
 * Numbers: [byte], [short], [integer], [long], [float], [double],
 * Text: [String], [char], [Regex]
 * Bool: [boolean],
 * Data: [File]
 * Graphical: [Layer]
 * Error Handling: [Error],
 *
 * All types that don't start with a capital letter are primitive types, and are automatically
 * duplicated when passed to functions or when used as values for new variables!
 * (If you wish to modify their values inside the function, or make another reference for
 * them, you must refer or cede them!)
 *
 * (Note that due to the need for a semi-consistent memory behavior between different language targets,
 * the transpiler may use types different from the original language's basic types!)
 *
**/

// Standard types
import String, integer from standard.types;

integer a = 0;

-some-function (integer my-a) {
    // ...
    // You can do everything, except for deleting the variable!
    // Any changes made here will affect the original variable!
    my-a = 1;
}
-some-function-1 (follow integer my-a) {
    // ...
    // You can do everything, except for deleting the variable!
    // Any changes made here will affect the original variable!
    my-a = 1;
}
-some-function-2 (assume integer my-a) {
    // ...
    // The value is not duplicated, and the original value will be deleted after this function is done,
    // and this function will have full control over this value!
    my-a = 1;
    // If you wish to delete this variable, you may do so before the end of the function's zone!
}

-some-function (a); // The value of 'a' is still "0"!
-some-function-1 (link a); // The value of 'a' is "2" now!
-some-function-2 (cede a); // The value of 'a' did indeed change, but it has been deleted now!

// If you wish to reuse the 'a' name for a variable, you can do so now! (because you already ceded the variable!)
integer a = 10;

integer a-ref = follow link a; // This is effectively a run-time alias for the same variable!
a-ref = 0; // Now, the value of 'a' is '0'!

String b = "The value of integer 'a' is '{a}'!";
// The value of the string b should be "The value of integer 'a' is '0'!"
// This is the recommended syntax in order to merge and make variable-dependent strings!
// Note that the curly brackets are respected as variable indicators only on the initial definition!
// You may use the escape character "\{" to prevent the curly brackets from being interpreted as variables!

// You may use the plus operator in order to append values to a stiring!
String c = "hello there!";
c += " I'm here to help you!";

// In your final output, both the following string manipulation methods should be understood to be the same!
"The value of integer 'a' is '{a}'!" ; // This is allowed!
"The value of integer 'a' is '" + a + "'!"; // This is allowed too, but not recommended!
// Allowing the "+" operator to act as a string manipulator is really just made for use within loops and use cases
// that may require modification of an already-existing string!

// Arrays
import Array, byte, Char from standard.types;

Array<byte> bytes = new Array<byte> (10); // a 'Byte' array with 10 items
Array<byte,> double-bytes = new Array<byte,> (10, 20); // a 'Byte' matrix with 10 rows and 20 columns

// The 'self' keyword refers to the type of the variable that is being defined!
Array<byte,> double-bytes-2 = new self (10, 20); // Note that you can use the 'self' keyword to shorten the written code!

/**
 *
 * @info
 *
 * Files can be manipulated using the [File] data type!
 *
**/

import File from standard.types;

File my-file = new self ("path/to/file.txt", File.mode.read-only);

/**
 *
 * @info
 *
 * Layers are part of the standard version! You may use them to create visual
 * layouts for your project's UI!
 *
**/

import Layer from standard.types;

// You can load a layer file from an outside source!
Layer my-layout = new self ("FILE_NAME.omni.lyr");

// Or you can directly define a layer in your code!
Layer my-own-layout = lyr<>
    <!--
        This is a language syntax draft for Omniarium layout files!
        (.omni.lyr)
    -->
    <Element property1="1" property2="2">
        <Element property1={?value-name} />
        <!-- This is how you call a value from a resource file! -->
        <Element property1={$value-name} />
        <!-- This is how you call a value from a .ini file!
            Note that .ini calls will result in a warning, as these
            values are not meant for this kind of usage! -->
        <Element property1={value-name} />
        <!-- This is how you call a value from your code!
            (This is basically a value injection!) -->
        <!-- You can use filters with elements too! -->
        <!-- But you need to define these filters in your source code! -->
        <Element @web value="...">
            This is a platform-specific element!
        </Element>
        <Element @android value="...">
            This is a platform-specific element!
        </Element>
    </Element>
</>;
// Note that direct-definition requires you to start the layer with the symbols
// "lyr<>" and end it with "</>"!

/**
 *
 * @info
 * 
 * [String] manipulation can be done with the help of regular expression ([Regex]) strings!
 *
**/

import Regex from standard.types;
Regex my-regex = rex/@[^\s]+/g;

// More on this soon...

/**
 *
 * @info
 *
 * Filters can be used to write functions that do the same
 * thing on all different transpilation targets!
 *
**/
@web
import -get-dom-element-by-id, DOM-Element from standard.targets.javascript;
@android
import -get-java-element-by-id, Java-View from standard.targets.java;

// @note : "Good" Omni Libraries (not source 'implementation') should aim to reduce the need for the user to specify
// a target filter as much as possible! Only the standard library and implementation libraries are meant to make use of
// the source filters and such!
// Ideally, a ready-for-use library that is intended to help with a spicific collection of source targets should not
// require the user to make use of any source target filters in their projects!

/**
 *
 * @info
 *
 * Omni code values are typed, and this can be a problem when dealing with
 * more than one target platform. For that, you may define a type
 * according to the current target platform using filters!
 *
**/

// @note : "prototype" statements are root-exclusive!

// You may define type aliases like this:
// An alias, set by the "is" keyword, does not exist on runtime! It is only processed at as a placeholder
// for the true type!
// You may use aliases with type definitions, variables, constants, and functions!
// @note : The "is" keyword is mainly intended for use within library files!
// It is not recommended to use this keyword in normal project files!
prototype Elm-Obj is @web DOM-Element, @android Java-View;
// In this case, the first valid type in the list will be used as the 'true type' for the alias
String original-string = "Hi!";
String string-alias is original-string;
String -original-function (integer num) {
    return "My number is '{num}'!"
}
String -function-alias (integer my-number) is -original-function; // Note that the alias function input variables' names
                                            // can differ, but their types and other related attributes should
                                            // remain the same!


// In order to inject target code, you need to tell the transpiler the type of the injected code
import * as inject-target from standard.injects.targets;

// Functions!
Elm-Obj -get-element (String id) {
    Elm-Obj elm;
    @web
    {
        elm = -get-dom-element-by-id (id);
    }
    @android
    {
        // Java code
        // ...
        elm = -get-java-element-by-id (id);
        /**
         *
         * @info
         *
         * You can inject native code into the result of your target platform!
         * (NEVER inject code without a target filter!)
         *
         * @caution
         * 
         * Code-injection should be a last resort!
         *
        **/
        String x = "hahaha";
        inject {{
            // you can inject native Java code!
            // You must contain variables, functions, and types with the symbol: "~"
            // If you do not do so, the names of these elements will most likely not follow their corresponding
            // elements in your code!

            String y = "nananana"; // This may cause problems in your final code, as this name may already be reserved!
            final char[] X = ~x~.toCharArray(); // Note that since "x" was defined using Omni code, you need to use the
                                            // symbol "~". (because the name 'x' may not be the actual final name for the
                                            // original variable!)
            // You may use the backslash character to escape this prefix "\~10"!
            final char[] Y = y.toCharArray();
            for(int i = 0; i < x.length; i++);
            ~String~ z = ~x~; // You may use this prefix with any element that may have a different name in the final
                            // target code!
        }} as inject-target.java;
    }
    return elm;
}

// @note : function definitions are root-exclusive!

integer -my-func () {
    // All this code above enables us to use one function
    // to write code for both targets @web and @android
    final Elm-Obj my-elm = -get-element ("my-id");
    integer r;

    if (my-elm != empty) {
        r = 0;
    } else {
        r = 1;
    }

    // You can also free variables before the end of the function!
    delete my-elm;

    // Do some other stuff
    // ...

    return r;

    // @note : Global variables are freed when this function is done executing!
}

// Run my-func() on start!
default -my-func;

// @note : "default" statement, outside of a switch case, is root-exclusive!
// @note : "default" statement, outside of a switch case, is a one-time use statement!

// You may define a function that doesn't return values as follows
// (notice that the Any & Void types are NOT supported)
-empty-func (integer a) {
    // do something with 'a'...
}

/**
 *
 * @info
 *
 * By default, a simple standard variable (with a simple standard type) received
 * in a function is duplicated, meaning that the function uses a variable that does
 * not share the same address as the input value!
 * 
 * But custom types and big data types (objects) are not duplicated!
 *
**/

-add-one (follow integer num) {
    // You can borrow the variable itself without causing duplication!
    num++;
    // Note that borrowed variables (a.k.a. non-duplicate variables) are only freed
    // at the end of their original scope!
    // If you try to free the borrowed variable here, this will result in an error!
    delete num; // This will prevent your program from being transpiled!
}
integer test-num;
// The value of 'test-num' should change, because you lent the original variable to the function!
-add-one (link test-num);
// @note : depending on your targeted language, the using of borrowing and lending may result in
// increased memory usage! So use this carefully! (e.g. if you borrow an integer, the final
// JavaScript code variable may hold the value inside an array, depening in the original code)

// You can add traits and warnings to functions use the filters feature!
// @note : Filters that start with an exclamation marks ("!") will not act as filters!
// These filters are transpiler-defined, and are seen more as trait markers!)
// @!deprecated             The user will be warned about this code being deprecated!
// @!library-exclusive      The user will be warned about use outside libraries!
// @!static                 The user will be warned about the use of any dynamic/run-time values
//                          and code within the code block!
// @note : You may use the "final" keyword to make this class immutable!
@!deprecated @!library-exclusive @!static
prototype Custom-Type {
    // Values used by this type/object!
    integer b; // Can be only accessed within non-exposed object functions              - protected
    expose integer a; // Can access this value directly (custom-var.a)                  - static
    local integer d; // Cannot be inherited by new object types!                        - private
    expose local integer e; // You can combine these keywords!

    // Functions that make use of certain keywords are type/object event functions!
    // These functions are used to manage the behaviour of the data type!

    // The "self" keyword can be used to manage the object's creation!
    self (integer a) {
        self.a = a;
        return self;
    }
    self (integer a, integer b) {
        self.a = a;
        self.b = b;
    }

    expose integer -asddda () {
        // Some function that doesn't reply on unexposed values!
    }

    // Define type-related functions!
    integer -get-a () {
        return self.a;
    }

    // Take care of deallocating memory!
    delete () {
        delete self.a;
    }

    // Do something when the value of the variable is called!
    call () {
        // If you wish to define a custom behaviour when the value of this type if retrieved,
        // do so here!
    }

    // ...
}
Custom-Type test-custom = new self(0);
integer my-a = test-custom.-get-a (); // You can use type functions like this when a value is 'private'!

// You can pass objects to functions without having to do anything fancy!
// Any changes made to the object inside the function will also modify the
// original value!
-some-custom-Function (Custom-Type test) {
    // Anything you do here will affect the original object's value!
}
-some-custom-Function (test-custom);

Custom-Type test-custom-1 = test-custom; // This is basically the same object,
                                        // you are not making a duplicate here!
Custom-Type test-custom-2 = clone test-custom; // You can clone objects like this!
// @note : The transpiler will fail builds that pass non-duplicatable types
// 

// @note : Careful! You can't actually call functions on the root-level of the code tree!
// You need to call functions from within the initial function! This is just a demo!

/**
 *
 * @info
 *
 * Error handling is done using the "try" and "catch" statements!
 *
 * @caution
 *
 * The combination of your target languages may prevent you from using this feature!
 *
**/

try {
    // Any errors thrown inside this 'try block' will be caught and handled by
    // the 'catch' block!

    // ...
    throw new Error ("My error message!");
} catch (Error error) {
    // handle error!
    // ...
}

// @note : You can't use the "try" and "catch" satements in the root level
// of the code tree!

/**
 *
 * @info
 *
 * Loops and conditional statements!
 *
**/

for (integer i = 0; i < 10; i++) {
    // If statement
    if (...) {
        //
        break;
    } else if (...) {
        //
        continue;keyword.boolean.omniarium
    } else {
        //
    }
    // Switch statement
    switch (i) {
        //
        case 1:
            // ..
            break;
        case 2:
            // ..
        default:
            // ..
    }
    // ...
}

do {
    // Run code, then check Boolean value!
    // ...
} while (true);

while (true) {
    // Check Boolean value, then run code!
    // ...
}

// @note : You can't use "for" and "while" loops in the root level
// of the code tree!

// a full code-statement:
// ([@!trait], [@!trait], ... [@filter]?)? ... ({...}|CONTEXT_SEPARATION|;)
// @note : Only one filter can be present at a time at the start of a code-statement,
// and it always comes last right before the start of the code-statement's content!

// @note : Tabs, whitespace, and new lines are always ignored while parsing! As such,
// a 'code line' must always end with either a semi-colon (;) or a code block ({...})!

/**
 *
 * Note that you can use multi-linear comments to document variables, types, and functions!
 *
 * @smth-1 abc or [abc]
 * Something about this variable...
 *
 * @smth-2 Abc or [Abc]
 * Something about this type...
 * 
 * @smth-3 -abc or [-abc]
 * Something about this function...
 *
 * @smth-4 #abc or [#abc]
 * Something about this constant...
 *
 * @smth-5 $abc or [$abc]
 * Something about this constant...
 *
 * @smth-6 integer or [integer]
 * Something about this primitive type...
 *
 * @smth-7 true or [true]
 * Something about this value...
 *
 * @smth-8 empty or [empty]
 * Something about this value...
 *
 * @smth-9 123 or [123]
 * Something about this value...
 *
 * @smth-10 "abc" or ["abc"]
 * Something about this value...
 *
 * @smth-11 'a' or ['a']
 * Something about this value...
 *
 * @smth-12 @aaaaa or [@aaaaa]
 * Something about this filter...
 *
 * @smth-13 @?aaaaa or [@?aaaaa]
 * Something about this filter...
 *
 * @smth-14 @!aaaaa or [@!aaaaa]
 * Something about this filter...
 *
**/


// documentation for an Omni function
/**
 *
 * @legal
 * (state copyright/license - if applicable)
 *
 * @summary
 * (What is the use of this function?)
 *
 * @input
 * <[Type-1]]> [argument-1]: (What is this argument? What is it used for?
 *                       excess text goes here!)
 *
 * <[Type-2]> [argument-2]: (What is this argument? What is it used for?
 *                       excess text goes here!)
 *
 * @output
 * <[Type]>: (What is the output?
 *           excess text goes here!)
 *
 * @Example
 * (Example code)
 *
**/
// All functions shall start with this!
// (you may remove unused sections)


/**
 *
 * @summary
 * This is the main function. It's executed at the start the program
 *
 * @output
 * <[integer]>: Used to signal the exit state of the program
 *        [0] - success
 *        other - failure
 * -
 *
**/

/**
 *
 * @info
 * TMLanguage uses a list of default highlighting types!
 * Below is a list of the default highlighting types that you may use to highlight elements!
 *
 * @note
 * In order to see the colourisation of these IDs, you must include the "#debug" repository!
 *
**/

comment.omniarium
comment.block.omniarium
comment.block.documentation.omniarium
comment.line.omniarium
comment.line.double-dash.omniarium
comment.line.double-slash.omniarium
comment.line.number-sign.omniarium
comment.line.percentage.omniarium
constant.omniarium
constant.character.omniarium
constant.character.escape.omniarium
constant.language.omniarium
constant.numeric.omniarium
constant.other.omniarium
constant.regexp.omniarium
constant.rgb-value.omniarium
constant.sha.git-rebase.omniarium
emphasis.omniarium
entity.omniarium
entity.name.omniarium
entity.name.class.omniarium
entity.name.function.omniarium
entity.name.method.omniarium
entity.name.section.omniarium
entity.name.selector.omniarium
entity.name.tag.omniarium
entity.name.type.omniarium
entity.other.omniarium
entity.other.attribute-name.omniarium
entity.other.inherited-class.omniarium
header.omniarium
invalid.omniarium
invalid.deprecated.omniarium
invalid.illegal.omniarium
keyword.omniarium
keyword.control.omniarium
keyword.control.less.omniarium
keyword.operator.omniarium
keyword.operator.new.omniarium
keyword.other.omniarium
keyword.other.unit.omniarium
markup.omniarium
markup.bold.omniarium
markup.changed.omniarium
markup.deleted.omniarium
markup.heading.omniarium
markup.inline.raw.omniarium
markup.inserted.omniarium
markup.italic.omniarium
markup.list.omniarium
markup.list.numbered.omniarium
markup.list.unnumbered.omniarium
markup.other.omniarium
markup.punctuation.list.beginning.omniarium
markup.punctuation.quote.beginning.omniarium
markup.quote.omniarium
markup.raw.omniarium
markup.underline.omniarium
markup.underline.link.omniarium
meta.omniarium
meta.cast.omniarium
meta.parameter.type.variable.omniarium
meta.preprocessor.omniarium
meta.preprocessor.numeric.omniarium
meta.preprocessor.string.omniarium
meta.return-type.omniarium
meta.selector.omniarium
meta.structure.dictionary.key.python.omniarium
meta.tag.omniarium
meta.type.annotation.omniarium
meta.type.name.omniarium
metatag.php.omniarium
storage.omniarium
storage.modifier.omniarium
storage.modifier.import.java.omniarium
storage.modifier.package.java.omniarium
storage.type.omniarium
storage.type.cs.omniarium
storage.type.java.omniarium
string.omniarium
string.html.omniarium
string.interpolated.omniarium
string.jade.omniarium
string.other.omniarium
string.quoted.omniarium
string.quoted.double.omniarium
string.quoted.other.omniarium
string.quoted.single.omniarium
string.quoted.triple.omniarium
string.regexp.omniarium
string.unquoted.omniarium
string.xml.omniarium
string.yaml.omniarium
strong.omniarium
support.omniarium
support.class.omniarium
support.constant.omniarium
support.function.omniarium
support.function.git-rebase.omniarium
support.other.omniarium
support.property-value.omniarium
support.type.omniarium
support.type.property-name.omniarium
support.type.property-name.css.omniarium
support.type.property-name.less.omniarium
support.type.property-name.scss.omniarium
support.variable.omniarium
variable.omniarium
variable.language.omniarium
variable.name.omniarium
variable.other.omniarium
variable.parameter.omniarium
