{
  "$note": "Names can include all the following characters: [\\w-]",
  "$ref-1": "https://github.com/chriscamicas/abl-tmlanguage",
  "$ref-2": "https://github.com/microsoft/vscode/tree/main/extensions/javascript",
  "$ref-3": "https://macromates.com/manual/en/",
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Omniarium",
  "scopeName": "source.omniarium",
  "patterns": [
    {
      "include": "#root-order"
    }
  ],
  "repository": {
    "root-order": {
      "patterns": [
        {
          "include": "#functions"
        },
        {
          "include": "#group-static"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#injects"
        },
        {
          "include": "#objects"
        },
        {
          "include": "#variables"
        },
        {
          "include": "#unhighlighted"
        }
      ]
    },
    "group-static": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#regex"
        },
        {
          "include": "#types"
        },
        {
          "include": "#filters"
        },
        {
          "include": "#operators"
        }
      ]
    },
    "unhighlighted": {
      "patterns": [
        {
          "name": "invalid.illegal.unhighlighted.omniarium",
          "match": "." 
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.omniarium",
          "match": "\\/\\/.*$"
        },
        {
          "name": "comment.block.documentation.omniarium",
          "begin": "\\/\\*",
          "end": "\\*\\/",
          "patterns": [
            {
              "name": "constant.language.comment.type.omniarium",
              "match": "(?<![\\w])(@[\\w-]+)(?![\\w-])",
              "captures": {
                "1": {
                  "name": "strong.omniarium"
                },
                "7": {
                  "name": "strong.omniarium"
                },
                "2": {
                  "name": "keyword.type.omniarium"
                }
              }
            },
            {
              "name": "constant.language.comment.type.omniarium",
              "match": "(((\\s@[\\w-]+)\\s+)|(\\[))((byte|short|integer|long|float|double|char|boolean))(\\]?)",
              "captures": {
                "5": {
                  "name": "keyword.type.omniarium"
                },
                "7": {
                  "name": "strong.omniarium"
                },
                "1": {
                  "name": "strong.omniarium"
                }
              }
            },
            {
              "name": "constant.language.comment.value.boolean.omniarium",
              "match": "(((\\s@[\\w-]+)\\s+)|(\\[))((true|false))(\\]?)",
              "captures": {
                "5": {
                  "name": "keyword.boolean.omniarium"
                },
                "7": {
                  "name": "strong.omniarium"
                },
                "1": {
                  "name": "strong.omniarium"
                }
              }
            },
            {
              "name": "constant.language.comment.value.null.omniarium",
              "match": "(((\\s@[\\w-]+)\\s+)|(\\[))((empty))(\\]?)",
              "captures": {
                "5": {
                  "name": "constant.language.null.omniarium"
                },
                "7": {
                  "name": "strong.omniarium"
                },
                "1": {
                  "name": "strong.omniarium"
                }
              }
            },
            {
              "name": "constant.language.comment.value.char.omniarium",
              "match": "(((\\s@[\\w-]+)\\s+)|(\\[))('(.*?)')(\\]?)",
              "captures": {
                "5": {
                  "name": "string.quoted.single.omniarium"
                },
                "7": {
                  "name": "strong.omniarium"
                },
                "1": {
                  "name": "strong.omniarium"
                }
              }
            },
            {
              "name": "constant.language.comment.value.string.omniarium",
              "match": "(((\\s@[\\w-]+)\\s+)|(\\[))(\"(.*?)\")(\\]?)",
              "captures": {
                "5": {
                  "name": "string.quoted.double.omniarium"
                },
                "7": {
                  "name": "strong.omniarium"
                },
                "1": {
                  "name": "strong.omniarium"
                }
              }
            },
            {
              "name": "constant.language.comment.value.numeric.omniarium",
              "match": "(((\\s@[\\w-]+)\\s+)|(\\[))((\\d+(\\.\\d+)?))(\\]?)",
              "captures": {
                "5": {
                  "name": "constant.numeric.omniarium"
                },
                "7": {
                  "name": "strong.omniarium"
                },
                "1": {
                  "name": "strong.omniarium"
                }
              }
            },
            {
              "name": "constant.language.comment.constant.omniarium",
              "match": "(((\\s@[\\w-]+)\\s+)|(\\[))([#\\$]([\\w-]+)?)(\\]?)",
              "captures": {
                "5": {
                  "name": "keyword.constant.omniarium"
                },
                "7": {
                  "name": "strong.omniarium"
                },
                "1": {
                  "name": "strong.omniarium"
                }
              }
            },
            {
              "name": "constant.language.comment.filter.omniarium",
              "match": "(((\\s@[\\w-]+)\\s+)|(\\[))((((@|@!|@\\?)[\\w_-]+)))(\\]?)",
              "captures": {
                "5": {
                  "name": "constant.character.escape"
                },
                "6": {
                  "name": "emphasis.omniarium"
                },
                "7": {
                  "name": "strong.omniarium"
                },
                "1": {
                  "name": "strong.omniarium"
                }
              }
            },
            {
              "name": "constant.language.comment.variable.omniarium",
              "match": "(((\\s@[\\w-]+)\\s+)|(\\[))([a-z]([\\w-]+)?)(\\]?)",
              "captures": {
                "5": {
                  "name": "variable.comment.omniarium"
                },
                "7": {
                  "name": "strong.omniarium"
                },
                "1": {
                  "name": "strong.omniarium"
                }
              }
            },
            {
              "name": "constant.language.comment.class.omniarium",
              "match": "(((\\s@[\\w-]+)\\s+)|(\\[))([A-Z]([\\w-]+)?)(\\]?)",
              "captures": {
                "5": {
                  "name": "entity.name.type.comment.omniarium"
                },
                "7": {
                  "name": "strong.omniarium"
                },
                "1": {
                  "name": "strong.omniarium"
                }
              }
            },
            {
              "name": "constant.language.comment.function.omniarium",
              "match": "(((\\s@[\\w-]+)\\s+)|(\\[))(-([a-zA-Z_-][\\w-]+)?)(\\]?)",
              "captures": {
                "5": {
                  "name": "entity.name.function.call.omniarium"
                },
                "7": {
                  "name": "strong.omniarium"
                },
                "1": {
                  "name": "strong.omniarium"
                }
              }
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.omniarium",
          "match": "(?<![\\w])(if|else|while|do|for|try|catch|switch|case|default|as|is|filter)(?![\\w-])"
        },
        {
          "name": "keyword.control.memory.omniarium",
          "match": "(?<![\\w])(link|follow|cede|assume|clone|delete|call|new|prototype|final)(?![\\w-])"
        },
        {
          "name": "keyword.control.lib.omniarium",
          "match": "(?<![\\w])(import|export|from)(?![\\w-])"
        },
        {
          "name": "keyword.control.class.omniarium",
          "match": "(?<![\\w])(expose|local)(?![\\w-])"
        },
        {
          "name": "keyword.control.flow.omniarium",
          "match": "(?<![\\w])(return|break|continue|throw)(?![\\w-])"
        }
      ]
    },
    "injects": {
      "patterns": [
        {
          "begin": "(?<![\\w])(inject)(?![\\w-])\\s*(\\{\\{)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.inject.omniarium"
            },
            "2": {
              "name": "punctuation.section.embedded.begin.omniarium"
            }
          },
          "end": "(\\}\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.embedded.end.omniarium"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.omniarium",
              "match": "(?<!\\\\)~[\\w-]*"
            },
            {
              "name": "constant.character.escape.omniarium",
              "match": "\\\\~"
            },
            {
              "name": "string.regexp.inject.omniarium",
              "match": ".+?"
            }
          ]
        },
        {
          "name": "keyword.control.inject.omniarium",
          "match": "(?<![\\w])(inject)(?![\\w-])"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.omniarium",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.omniarium",
          "match": "\\\\."
        },
        {
          "name": "constant.character.escape.curly.omniarium",
          "begin": "{",
          "end": "}",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "regex": {
      "begin": "/",
      "beginCaptures": {
        "0": {
          "name": "string.regexp.omniarium"
        }
      },
      "end": "(/)([a-z]*)",
      "endCaptures": {
        "1": {
          "name": "string.regexp.omniarium"
        },
        "2": {
          "name": "keyword.other.flags.omniarium"
        }
      },
      "patterns": [
        {
          "name": "string.regexp.omniarium",
          "match": "(\\\\.|[^\/\\\\])*" 
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "keyword.type.omniarium",
          "match": "(?<![\\w])(byte|short|integer|long|float|double|char|boolean)(?![\\w-])"
        },
        {
          "name": "entity.name.type.omniarium",
          "match": "(?<![\\w])(Error|String)(?![\\w-])"
        },
        {
          "name": "keyword.boolean.omniarium",
          "match": "(?<![\\w])(true|false)(?![\\w-])"
        },
        {
          "name": "constant.language.null.omniarium",
          "match": "(?<![\\w])(empty)(?![\\w-])"
        },
        {
          "name": "string.quoted.single.omniarium",
          "match": "'(.*?)'"
        },
        {
          "name": "constant.numeric.omniarium",
          "match": "(?<![\\w])(\\d+(\\.\\d+)?)(?![\\w-])"
        },
        {
          "name": "keyword.constant.user.omniarium",
          "match": "\\$[a-z][\\w-]*"
        },
        {
          "name": "keyword.constant.omniarium",
          "match": "#[a-z][a-zA-Z0-9_\\.-]*"
        }
      ]
    },
    "objects": {
      "patterns": [
        {
          "name": "entity.name.type.omniarium",
          "match": "(?<![\\w])(Error)(?![\\w-])"
        },
        {
          "name": "entity.name.type.class.omniarium",
          "match": "(?<![\\w])([A-Z][\\w-]*)(?![\\w-])"
        },
        {
          "name": "keyword.control.self.omniarium",
          "match": "(?<![\\w])(self)(?![\\w-])"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.call.omniarium",
          "match": "(?<![\\w])-[a-zA-Z_-][\\w-]*"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.omniarium",
          "match": "\\b([a-z][\\w-]*)(?![\\w-])"
        }
      ]
    },
    "filters": {
      "patterns": [
        {
          "name": "meta.preprocessor",
          "match": "(((@|@!|@\\?)[\\w_-]+))",
          "captures": {
            "1": {
              "name": "constant.character.escape"
            },
            "2": {
              "name": "emphasis.omniarium"
            }
          }
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.omniarium",
          "match": "\\+|-|\\*|/|%|==|!=|>|<|>=|<=|&&|\\|\\||!|="
        },
        {
          "name": "keyword.operator.omniarium",
          "match": ",|{|}|\\(|\\)|;|:|\\."
        },
        {
          "name": "keyword.operator.new.omniarium",
          "match": "@"
        }
      ]
    }
  }
}
