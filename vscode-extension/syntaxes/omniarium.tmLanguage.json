{
    "$note-1": "NEVER update this file in the .GITHUB directory!!!",
    "$note-2": "Names can include all the following characters: [a-zA-Z0-9_-]",
    "$ref-1": "https://github.com/chriscamicas/abl-tmlanguage",
    "$ref-2": "https://github.com/microsoft/vscode/tree/main/extensions/javascript",
    "$ref-3": "https://macromates.com/manual/en/",
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Omniarium",
    "scopeName": "source.omniarium",
    "patterns": [
      {
        "include": "#comments"
      },
      {
        "include": "#keywords"
      },
      {
        "include": "#strings"
      },
      {
        "include": "#types"
      },
      {
        "include": "#functions"
      },
      {
        "include": "#variables"
      },
      {
        "include": "#filters"
      },
      {
        "include": "#operators"
      }
    ],
    "repository": {
      "comments": {
        "patterns": [
          {
            "name": "comment.line.double-slash.omniarium",
            "match": "\\/\\/.*$"
          },
          {
            "name": "comment.block.c.omniarium",
            "begin": "\\/\\*",
            "end": "\\*\\/"
          }
        ]
      },
      "keywords": {
        "patterns": [
          {
            "name": "keyword.control.omniarium",
            "match": "(?<![a-zA-Z0-9_])(if|else|while|do|for|try|catch|switch|case|default|as|is|filter)(?![a-zA-Z0-9_-])"
          },
          {
            "name": "keyword.control.memory.omniarium",
            "match": "(?<![a-zA-Z0-9_])(lend|borrow|delete|call|new|self|type|traits)(?![a-zA-Z0-9_-])"
          },
          {
            "name": "keyword.control.lib.omniarium",
            "match": "(?<![a-zA-Z0-9_])(import|export|from|inject)(?![a-zA-Z0-9_-])"
          },
          {
            "name": "keyword.control.flow.omniarium",
            "match": "(?<![a-zA-Z0-9_])(return|break|continue|throw)(?![a-zA-Z0-9_-])"
          }
        ]
      },
      "strings": {
        "name": "string.quoted.double.omniarium",
        "begin": "\"",
        "end": "\"",
        "patterns": [
          {
            "name": "constant.character.escape.omniarium",
            "match": "\\\\."
          },
          {
            "name": "constant.character.escape.curly.omniarium",
            "begin": "{",
            "end": "}",
            "patterns": [
              {
                "include": "$self"
              }
            ]
          }
        ]
      },
      "types": {
        "patterns": [
          {
            "name": "entity.name.type.omniarium",
            "match": "(?<![a-zA-Z0-9_])(Byte|Short|Integer|Long|Float|Double|String|Char|Boolean|Error)(?![a-zA-Z0-9_-])"
          },
          {
            "name": "entity.name.type.class.omniarium",
            "match": "(?<![a-zA-Z0-9_])([A-Z][a-zA-Z0-9_-]*)(?![a-zA-Z0-9_-])"
          },
          {
            "name": "keyword.boolean.omniarium",
            "match": "(?<![a-zA-Z0-9_])(true|false)(?![a-zA-Z0-9_-])"
          },
          {
            "name": "constant.language.omniarium",
            "match": "(?<![a-zA-Z0-9_])(empty)(?![a-zA-Z0-9_-])"
          },
          {
            "name": "string.quoted.single.omniarium",
            "match": "'(.*?)'"
          },
          {
            "name": "constant.numeric.omniarium",
            "match": "(?<![a-zA-Z0-9_])(\\d+(\\.\\d+)?)(?![a-zA-Z0-9_-])"
          },
          {
            "name": "keyword.constant.omniarium",
            "match": "\\$[a-z][a-zA-Z0-9_-]*"
          },
          {
            "name": "keyword.constant.omniarium",
            "match": "#[a-z][a-zA-Z0-9_\\.-]*"
          }
        ]
      },
      "functions": {
        "patterns": [
          {
            "name": "entity.name.function.omniarium",
            "match": "(?<![a-zA-Z0-9_])([a-z_][a-zA-Z0-9_-]*)(?![a-zA-Z0-9_-])(?=\\s*\\()"
          },
          {
            "name": "punctuation.parenthesis.open.function.omniarium",
            "match": "\\("
          },
          {
            "name": "punctuation.parenthesis.close.function.omniarium",
            "match": "\\)"
          }
        ]
      },
      "variables": {
        "patterns": [
          {
            "name": "variable.other.omniarium",
            "match": "(?<![a-zA-Z0-9_])([a-z_][a-zA-Z0-9_-]*)(?![a-zA-Z0-9_-])"
          }
        ]
      },
      "filters": {
        "patterns": [
          {
            "name": "entity.name.tag.omniarium",
            "match": "@[\\w_-]+"
          }
        ]
      },
      "operators": {
        "patterns": [
          {
            "name": "keyword.operator.omniarium", 
            "match": "\\+|-|\\*|/|%|==|!=|>|<|>=|<=|&&|\\|\\||!|=" 
          },
          {
            "name": "keyword.operator.omniarium", 
            "match": "," 
          },
          {
            "name": "keyword.operator.new.omniarium", 
            "match": "@" 
          }
        ]
      }
    }
}